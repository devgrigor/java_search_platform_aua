package hello;

import java.util.concurrent.atomic.AtomicLong;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.CrossOrigin;
import java.util.Collection;


import hello.SearchRecord;
import hello.SearchRecordRepository;

@RestController
public class SearchRecordController {
   // private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();

    @Autowired // This means to get the bean called SearchRecordRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private SearchRecordRepository searchRecordRepository;

    @CrossOrigin(origins = "*", allowedHeaders = "*")
    @RequestMapping("/search-records")
    public Iterable<SearchRecord> getSearchRecords(
    	@RequestParam(value="name", defaultValue="World") String name) {
        
        return searchRecordRepository.findAll();
    }

    @CrossOrigin(origins = "*", allowedHeaders = "*")
    @PostMapping("/search-records")
    SearchRecord postSearchRecord(@RequestBody SearchRecord postSearchRecord){

        Collection<SearchRecord> records = searchRecordRepository.findByKeyword(postSearchRecord.getKeyword());

        if(records.size()>0){
            System.out.println("keyword exists");
        }
        else{
            System.out.println("keyword does not exist");
            return searchRecordRepository.save(postSearchRecord);
        }

        SearchRecord res = new SearchRecord();
        return res;
    }


    // REST API
    // GET: /SearchRecords /can have filters
    // GET: /SearchRecords/{id}
    // POST: /SearchRecords /has data
    // PUT: /SearchRecords/{id} /has data
    // DELETE: /SearchRecords/{id}    
}
